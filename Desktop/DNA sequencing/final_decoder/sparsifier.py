import itertools
import numpy as np


class Sparsifier:
    """Sparsifier creates"""

    def __init__(self):
        self.mapping = {} # maps k bit length sequnces to n sparse sequence quaternary vector
        self.binary_sequences = [] # All the binary sequences for the k bits specified
        self.reverse_mapping = {} #maps n sparse sequence quaternary vector to k bit length sequnces 
        self.substitutions = {} #dictionary i: {0: denisty of 0 , etc } # Needed for Trellis transitions

        self.q_mapping  = {0:'A', 1:'C', 2:'G', 3:'T'}
        self.base_mapping = {'A':0, 'C':1, 'G':2, 'T':3}
        

    def reinitialise(self):
        "Reinitialises the class to sparsify a different mapping"
        self.__init__() 

    def create_mapping(self,k,n):
        """Creates a mapping table between k bits to n sparse quaternary sequence
        in the self.mapping and self.reverse_mapping"""

        #if n < (2**k) / 3: raise ValueError(f'n has to be larger than {(2**k) / 3} for k = {k}')

        def genbin(k, bs=''):
            """Generates all the binary k length sequences"""
            if len(bs) == k:
                self.binary_sequences.append(bs)
            else:
                genbin(k, bs + '0')
                genbin(k, bs + '1')

        genbin(k)

        basis = ('1','2','3')
        index = 0 #Counter for binary numbers

        self.mapping = {bins:None for bins in self.binary_sequences }

        sparse = ['0']*n
        for b in basis:
            for j in range(n):
                
                sparse[j] = b
                self.mapping[self.binary_sequences[index]] = sparse[:]  #''.join(sparse[:])
                sparse[j] = '0'
                index+=1
                if index >= len(self.binary_sequences) : return


        for num in range(2,n):
            new_choices = list(itertools.product(basis,repeat = num))
            points = list(itertools.combinations(range(n),num))

            for new_basis in new_choices:

                for point in points:
                    sparse = ['0']*n

                    for i,choice in zip(point,new_basis):
                        sparse[i] = choice

                    self.mapping[self.binary_sequences[index]] = sparse[:] #''.join(sparse[:])
                    index +=1
                    if index >= len(self.binary_sequences) : return


    def map(self,codeword,k):
        '''Maps codeword to a sparse sequence 
        always choose codeword divisible by k'''
        if len(codeword) % k != 0 : raise ValueError(f'k has to be a divisor the codeword length for sensible mapping')

        sparse_sequence = []
        
        for i in range(0,len(codeword),k):
            bits = codeword[i:i+k]
            sparse_sequence += self.mapping[bits]

        return sparse_sequence

    def sparsify(self,codeword,k,n):
        """Creates the k --> n mapping and maps the codeword onto a sparse sequence"""
        self.create_mapping(k,n)

        return np.array([int(q) for q in self.map(codeword,k)])

    def substitution_distribution(self,k,n):
        """Returns the probability distribution for the transmission/substitution 
        at each transmission index -- used to assign the substituion/transmission edge values"""

        self.substitutions = {i:{'0':0, '1':0 , '2': 0 , '3':0} for i in range(n)}
        total = 2**k

        for sparse in self.mapping.values():

            for i,symbol in enumerate(sparse):
                self.substitutions[i][symbol]  += 1 /total
        
        return self.substitutions

    def decoder(self,transmitted_likelihoods,watermark,k,n):
        """Use the likelihoods from the sparse vector to compute loglikelihoods of the codeword bits"""

        """Look at values - the sparse sequences and for each choice loop through and do a product rule using self.substitutions"""
        
        codeword_likelihoods = []
       

        #Jumping each n codewords
        for i in range(0,len(transmitted_likelihoods),n):
            
            p_ones = np.zeros(k)
            p_zeros = np.zeros(k)

            log_liklihoods =[]

            for code,sparse in self.mapping.items():
            
                prob = 1

                

                for j,q in enumerate(sparse):
                    w_j = self.base_mapping[watermark[i+j]]
                    t_j = (w_j + int(q))%4
                    prob *= transmitted_likelihoods[i+j][self.q_mapping[t_j]]
    
                
        
                for l,b in enumerate(code):
                    if b == '0': p_zeros[l] += prob
                    elif b == '1': p_ones[l] += prob
            '''
            for p0,p1 in zip(p_zeros,p_ones):
                if p0==0 and p1==0 : log_liklihoods.append(0)

                elif p0 == 0: log_liklihoods.append(float('-infinity'))

                elif p1 == 0: log_liklihoods.append(float('infinity'))

                else: log_liklihoods.append(np.log(p0/p1))
            '''
            log_liklihoods = np.log(np.array(p_zeros) / np.array(p_ones))
            codeword_likelihoods.extend(log_liklihoods)
        
        return np.array(codeword_likelihoods)
                
            

        

        


if __name__ == '__main__':

    n = 5
    k = 5
    S = Sparsifier()

    S.create_mapping(k,n)

    print('-'*162)

    #m = np.random.randint(0,2,30) #This is the message
    #m = ''.join([str(b) for b in m])
    #print(m)
    #sparse = S.map(m,k)
    #print(len(sparse))
    


    transmitted_likelihoods = {0: {'A': 0.017037248702534726, 'C': 0.003405665493807079, 'T': 0.9718644887099716, 'G': 0.007692597093686668},
                                 1: {'A': 0.004681415212859106, 'C': 0.8303235443820122, 'T': 0.005329638829056376, 'G': 0.15966540157607237},
                                   2: {'A': 0.021628884474554386, 'C': 0.00461694139930668, 'T': 0.020674375071164392, 'G': 0.9530797990549745},
                                     3: {'A': 0.6274329230304565, 'C': 0.034294235681395495, 'T': 0.18436139424287185, 'G': 0.15391144704527612},
                                       4: {'A': 0.012808816808601438, 'C': 0.0036846118674415795, 'T': 0.011791326219074185, 'G': 0.9717152451048828}}
    
    watermark = ['T', 'C', 'G', 'T', 'G']

    transmitted_likelihoods = {0: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 1: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 2: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 3: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 4: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 5: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 6: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 7: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 8: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 9: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 10: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 11: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 12: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 13: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 14: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 15: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 16: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 17: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 18: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 19: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 20: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 21: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 22: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 23: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 24: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 25: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 26: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 27: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 28: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 29: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 30: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 31: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 32: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 33: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 34: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 35: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 36: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 37: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 38: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 39: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 40: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 41: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 42: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 43: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 44: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 45: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 46: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 47: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 48: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 49: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 50: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 51: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 52: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 53: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 54: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 55: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 56: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 57: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 58: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 59: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 60: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 61: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 62: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 63: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 64: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 65: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 66: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 67: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 68: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 69: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 70: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 71: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 72: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 73: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 74: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 75: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 76: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 77: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 78: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 79: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 80: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 81: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 82: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 83: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 84: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 85: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 86: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 87: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 88: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 89: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 90: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 91: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 92: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 93: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 94: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 95: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 96: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 97: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 98: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 99: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 100: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 101: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 102: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 103: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 104: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 105: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 106: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 107: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 108: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 109: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 110: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 111: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 112: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 113: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 114: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 115: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 116: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 117: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 118: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 119: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 120: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 121: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 122: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 123: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 124: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 125: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 126: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 127: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 128: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 129: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 130: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 131: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 132: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 133: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 134: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 135: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 136: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 137: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 138: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 139: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 140: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 141: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 142: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 143: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 144: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 145: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 146: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 147: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 148: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 149: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 150: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 151: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 152: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 153: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 154: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 155: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 156: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 157: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 158: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 159: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 160: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 161: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 162: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 163: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 164: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 165: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 166: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 167: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 168: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 169: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 170: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 171: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 172: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 173: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 174: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 175: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 176: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 177: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 178: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 179: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 180: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 181: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 182: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 183: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 184: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 185: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 186: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 187: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 188: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 189: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 190: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 191: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 192: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 193: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 194: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 195: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 196: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 197: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 198: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 199: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 200: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 201: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 202: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 203: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 204: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 205: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 206: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 207: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 208: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 209: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 210: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 211: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 212: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 213: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 214: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 215: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 216: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 217: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 218: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 219: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 220: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 221: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 222: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 223: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 224: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 225: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 226: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 227: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 228: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 229: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 230: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 231: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 232: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 233: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 234: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 235: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 236: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 237: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 238: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 239: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 240: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 241: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 242: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 243: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 244: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 245: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 246: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 247: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 248: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 249: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 250: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 251: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 252: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 253: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 254: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 255: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 256: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 257: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 258: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 259: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 260: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 261: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 262: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 263: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 264: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 265: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 266: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 267: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 268: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 269: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 270: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 271: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 272: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 273: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 274: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 275: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 276: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 277: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 278: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 279: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 280: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 281: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 282: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 283: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 284: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 285: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 286: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 287: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 288: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 289: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 290: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 291: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 292: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 293: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 294: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 295: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 296: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 297: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 298: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 299: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 300: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 301: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 302: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 303: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 304: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 305: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 306: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 307: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 308: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 309: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 310: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 311: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 312: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 313: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 314: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 315: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 316: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 317: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 318: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 319: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 320: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 321: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 322: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 323: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 324: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 325: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 326: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 327: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 328: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 329: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 330: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 331: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 332: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 333: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 334: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 335: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 336: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 337: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 338: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 339: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 340: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 341: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 342: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 343: {'A': 0.0, 'C': 0.0, 'T': 0.0, 'G': 1.0}, 344: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 345: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 346: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 347: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 348: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 349: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 350: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 351: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 352: {'A': 0.0, 'C': 1.0, 'T': 0.0, 'G': 0.0}, 353: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 354: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 355: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 356: {'A': 0.0, 'C': 0.0, 'T': 1.0, 'G': 0.0}, 357: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 358: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}, 359: {'A': 1.0, 'C': 0.0, 'T': 0.0, 'G': 0.0}}
    watermark = ['C', 'C', 'T', 'A', 'A', 'G', 'T', 'C', 'C', 'A', 'G', 'A', 'C', 'C', 'A', 'T', 'T', 'C', 'G', 'A', 'A', 'G', 'G', 'G', 'G', 'G', 'C', 'A', 'A', 'T', 'A', 'T', 'G', 'A', 'A', 'G', 'T', 'T', 'C', 'G', 'G', 'C', 'A', 'G', 'C', 'A', 'A', 'A', 'T', 'A', 'C', 'A', 'G', 'A', 'A', 'A', 'A', 'C', 'T', 'C', 'A', 'G', 'C', 'C', 'C', 'A', 'C', 'G', 'G', 'C', 'A', 'T', 'G', 'T', 'G', 'A', 'C', 'T', 'G', 'C', 'T', 'A', 'A', 'T', 'G', 'A', 'G', 'C', 'T', 'C', 'C', 'G', 'T', 'G', 'A', 'A', 'T', 'C', 'G', 'T', 'G', 'C', 'A', 'G', 'A', 'A', 'C', 'A', 'G', 'T', 'T', 'C', 'G', 'A', 'A', 'C', 'A', 'T', 'C', 'T', 'C', 'A', 'A', 'C', 'C', 'G', 'C', 'A', 'T', 'A', 'T', 'G', 'G', 'A', 'C', 'T', 'T', 'C', 'A', 'C', 'A', 'A', 'A', 'A', 'A', 'T', 'G', 'A', 'G', 'T', 'C', 'T', 'G', 'T', 'C', 'C', 'C', 'C', 'T', 'A', 'C', 'C', 'G', 'A', 'G', 'C', 'A', 'A', 'A', 'T', 'G', 'C', 'A', 'T', 'T', 'T', 'C', 'C', 'C', 'G', 'T', 'G', 'G', 'G', 'C', 'T', 'T', 'C', 'T', 'A', 'G', 'T', 'A', 'G', 'A', 'G', 'G', 'G', 'G', 'A', 'G', 'C', 'A', 'G', 'T', 'G', 'G', 'A', 'C', 'A', 'C', 'C', 'T', 'A', 'C', 'G', 'A', 'A', 'T', 'G', 'G', 'G', 'A', 'C', 'A', 'G', 'G', 'T', 'G', 'C', 'T', 'T', 'T', 'G', 'C', 'G', 'A', 'G', 'A', 'C', 'T', 'A', 'G', 'C', 'A', 'A', 'T', 'G', 'T', 'A', 'T', 'G', 'G', 'A', 'G', 'G', 'G', 'T', 'C', 'T', 'T', 'T', 'C', 'C', 'C', 'G', 'C', 'A', 'C', 'A', 'A', 'G', 'G', 'A', 'C', 'T', 'A', 'C', 'G', 'C', 'C', 'C', 'T', 'C', 'C', 'T', 'T', 'G', 'T', 'A', 'G', 'C', 'G', 'C', 'C', 'C', 'T', 'T', 'T', 'A', 'G', 'C', 'A', 'A', 'C', 'C', 'T', 'T', 'T', 'T', 'G', 'T', 'G', 'C', 'C', 'G', 'T', 'G', 'A', 'T', 'C', 'T', 'A', 'T', 'T', 'G', 'T', 'G', 'G', 'T', 'C', 'T', 'A', 'A', 'A', 'T', 'T', 'G', 'G', 'T', 'G', 'C', 'G', 'G', 'T', 'A', 'A', 'T', 'C', 'G', 'T', 'T', 'C', 'G', 'A', 'A', 'T', 'A', 'A', 'C']

    output = S.decoder(transmitted_likelihoods,watermark,k,n)
    print(output)


